type: install
name: Jelasticozor Backend Cluster
baseUrl: https://raw.githubusercontent.com/jelasticozor/deployment-infrastructure/master

ssl: false

settings:
  fields:
    - type: spacer
      caption: Kubernetes Setup
    - name: useRandomJelasticEnvName
      type: toggle
      caption: Use Random Jelastic Env Name
      value: true
      hidden: false
      showIf:
        false:
          - name: envName
            caption: Env Name
            type: string
            required: true
    - name: topo
      type: radio-fieldset
      values:
        0-dev: '<b>Development:</b> one master (1) and one scalable worker (1+)'
        1-prod: '<b>Production:</b> multi master (3) with API balancers (2+) and scalable workers (2+)'
      default: 0-dev
      showIf:
        1-prod:
          - type: spacer
            caption: Mail server
          - name: mailServerHost
            caption: Host
            type: string
            required: true
          - name: mailServerPort
            caption: Port
            type: string
            required: true
          - name: mailServerUsername
            caption: Username
            type: string
            required: true
          - name: mailServerPassword
            caption: Password
            type: string
            inputType: password
            required: true
          - name: mailServerEnableSsl
            caption: Enable SSL
            type: toggle
            value: true
    - name: kubernetesVersion
      type: string
      caption: Kubernetes version
      default: v1.23.6
    - type: spacer
      caption: IAM Service
    - name: useJelasticEmailAsAuthAdminEmail
      type: toggle
      caption: Use Jelastic Email
      value: true
      hidden: false
      showIf:
        false:
          name: authAdminEmail
          caption: Admin email
          type: string
          required: true
    - name: authIssuer
      caption: JWT issuer
      type: string
      default: your-company.com
    - name: fromEmail
      caption: From Email
      type: string
      required: true
    - name: fromName
      caption: From Name
      type: string
      required: true
    - type: spacer
      caption: Hasura
    - name: useAutoGeneratedHasuraAdminSecret
      type: toggle
      caption: Auto-generate Admin Secret
      value: true
      showIf:
        false:
          name: hasuraAdminSecret
          caption: Admin Secret
          type: string
          inputType: password
          required: true
    - type: spacer
      caption: SSL
    - name: useDefaultExternalDomain
      type: toggle
      caption: Use Default External Domain
      value: true
      hidden: false
      showIf:
        false:
          - name: externalDomains
            caption: External domain names (;-separated list)
            type: string
            vtype: domainlist
            required: true
    
globals:
  # jelastic environment
  RANDOM_ENV_NAME: env-${fn.random}
  # mail
  MAILHOG_NAMESPACE: mail
  MAILHOG_RELEASE_NAME: mailhog
  # postgres
  POSTGRESQL_RELEASE_NAME: postgresql
  POSTGRESQL_NAMESPACE: database
  HASURA_DB_NAME: hasura
  HASURA_DB_USERNAME: hasura_user
  HASURA_DB_PASSWORD: ${fn.password(40)}
  AUTH_DB_NAME: fusionauth
  AUTH_DB_USERNAME: auth
  AUTH_DB_PASSWORD: ${fn.password(40)}
  POSTGRES_PASSWORD: ${fn.password(40)}
  POSTGRES_REPLICATION_PASSWORD: ${fn.password(40)}
  # hasura
  HASURA_UNAUTHORIZED_ROLE: anonymous
  HASURA_ADMIN_SECRET_AUTO: ${fn.password(40)}
  HASURA_CLAIMS_NAMESPACE: https://hasura.io/jwt/claims
  # auth
  AUTH_RELEASE_NAME: fusionauth
  AUTH_NAMESPACE: iam
  AUTH_ADMIN_PASSWORD: ${fn.password(40)}
  AUTH_ALMIGHTY_API_KEY: ${fn.password(40)}
  AUTH_SERVERLESS_API_KEY: ${fn.password(40)}
  JWT_KEY_ALGORITHM: RS256

# TODO: we need more than 32 cloudlets in a worker node in the development configuration

onInstall:
  - computeOptionalParams
  - installCluster
  - installSsl

actions:
  computeOptionalParams:
    - script: |
        return {
          result: 0,
          envName: ${settings.useRandomJelasticEnvName} ? "${globals.RANDOM_ENV_NAME}" : "${settings.envName}",
          email: ${settings.useJelasticEmailAsAuthAdminEmail} ? "${user.email}" : "${settings.authAdminEmail}",
          hasuraAdminSecret: ${settings.useAutoGeneratedHasuraAdminSecret} ? "${globals.HASURA_ADMIN_SECRET_AUTO}" : "${settings.hasuraAdminSecret}",
          hasuraEnableConsole: "${settings.topo}" == "0-dev" ? "true" : "false",
          externalDomains: ${settings.useDefaultExternalDomain} ? "${env.domain}" : "${settings.externalDomains}",
          mailServer: {
            host: "${settings.topo}" == "0-dev" ? "${globals.MAILHOG_RELEASE_NAME}.${globals.MAILHOG_NAMESPACE}" : "${settings.mailServerHost}",
            port: "${settings.topo}" == "0-dev" ? "1025" : "${settings.mailServerPort}",
            username: "${settings.topo}" == "0-dev" ? "" : "${settings.mailServerUsername}",
            password: "${settings.topo}" == "0-dev" ? "" : "${settings.mailServerPassword}",        
            ssl: "${settings.topo}" == "0-dev" ? "false" : "${settings.mailServerEnableSsl}"
          }
        };
    - setGlobals:
        ENV_NAME: ${response.envName}
        USER_EMAIL: ${response.email}
        HASURA_ADMIN_SECRET: ${response.hasuraAdminSecret}
        HASURA_ENABLE_CONSOLE: ${response.hasuraEnableConsole}
        EXTERNAL_DOMAINS: ${response.externalDomains}
        MAIL_SERVER_HOST: ${response.mailServer.host}
        MAIL_SERVER_PORT: ${response.mailServer.port}
        MAIL_SERVER_USERNAME: ${response.mailServer.username}
        MAIL_SERVER_PASSWORD: ${response.mailServer.password}
        MAIL_SERVER_SSL: ${response.mailServer.ssl}
  installCluster:
    install:
      jps: https://github.com/jelastic-jps/kubernetes/blob/${settings.kubernetesVersion}/manifest.jps
      displayName: Jelasticozor Engine
      envName: ${globals.ENV_NAME}
      settings:
        # TODO: remove hello-kubernetes
        # TODO: install rabbitmq
        deploy: cmd
        cmd: |-
          [ "${settings.topo}" = "0-dev" ] && curl -fsSL ${baseUrl}/mailhog/install_mailhog.sh | /bin/sh -s ${baseUrl} ${globals.MAILHOG_NAMESPACE} ${globals.MAILHOG_RELEASE_NAME} 
          curl -fsSL ${baseUrl}/database/install_db.sh | /bin/sh -s ${baseUrl} ${globals.POSTGRESQL_RELEASE_NAME} ${globals.POSTGRESQL_NAMESPACE} ${globals.HASURA_DB_NAME} ${globals.HASURA_DB_USERNAME} ${globals.HASURA_DB_PASSWORD} ${globals.AUTH_DB_NAME} ${globals.AUTH_DB_USERNAME} ${globals.AUTH_DB_PASSWORD} ${globals.POSTGRES_PASSWORD} ${globals.POSTGRES_REPLICATION_PASSWORD}
          curl -fsSL ${baseUrl}/faas/install_faas.sh | /bin/sh
          curl -fsSL ${baseUrl}/iam/install_iam.sh | /bin/sh -s "${baseUrl}" "${globals.AUTH_RELEASE_NAME}" "${globals.AUTH_NAMESPACE}" "${globals.POSTGRESQL_RELEASE_NAME}" "${globals.POSTGRESQL_NAMESPACE}" "${settings.topo}" "${globals.AUTH_DB_USERNAME}" "${globals.AUTH_DB_PASSWORD}" "${globals.AUTH_DB_NAME}" "${globals.USER_EMAIL}" "${globals.AUTH_ADMIN_PASSWORD}" "${globals.AUTH_ALMIGHTY_API_KEY}" "${globals.AUTH_SERVERLESS_API_KEY}" "${settings.authIssuer}" "${globals.MAIL_SERVER_HOST}" "${globals.MAIL_SERVER_PORT}" "${globals.MAIL_SERVER_USERNAME}" "${globals.MAIL_SERVER_PASSWORD}" "${globals.MAIL_SERVER_SSL}" "${settings.fromEmail}" "${settings.fromName}" "${globals.HASURA_CLAIMS_NAMESPACE}" 
          curl -fsSL ${baseUrl}/hasura/install_hasura.sh | /bin/sh -s "${baseUrl}" "${globals.POSTGRESQL_RELEASE_NAME}" "${globals.POSTGRESQL_NAMESPACE}" "${globals.AUTH_RELEASE_NAME}" "${globals.AUTH_NAMESPACE}" "${globals.HASURA_DB_USERNAME}" "${globals.HASURA_DB_PASSWORD}" "${globals.HASURA_DB_NAME}" "${globals.HASURA_ADMIN_SECRET}" "${globals.JWT_KEY_ALGORITHM}" "${globals.HASURA_CLAIMS_NAMESPACE}" "${settings.authIssuer}" 
        topo: ${settings.topo}
        dashboard: general
        ingress-controller: Nginx
        storage: true
        # TODO: we will very likely not use this feature like that; we don't want to have an ingress to the server API endpoint!
        api: true
        monitoring: true
        version: ${settings.kubernetesVersion}
        jaeger: false
  # TODO: take this out to a separate manifest
  installSsl:
    - addLoadBalancer
    - installAddon:
        id: letsencrypt
        settings:
          externalDomains: ${globals.EXTERNAL_DOMAINS}
    # TODO: they are all docker nodes in the end, so the following commands are not reliable
    - closeFromOutsideWorld:
        nodeGroup: cp
        relatedNodeGroup: bl
    - closeFromOutsideWorld:
        nodeGroup: k8sm
        relatedNodeGroup: bl
    - autoRedirectToHttps
  addLoadBalancer:
    - addNodes:
        - nodeType: nginx-dockerized
          nodeGroup: bl
          count: 1
          fixedCloudlets: 1
          flexibleCloudlets: 4
  closeFromOutsideWorld:
    script: https://raw.githubusercontent.com/jelasticozor/jelastic-common/master/security/closeNodeGroupFromOutsideWorld.js
    nodeGroup: ${this.nodeGroup}
    relatedNodeGroup: ${this.relatedNodeGroup}
  autoRedirectToHttps:
    - cmd[bl]: wget ${baseUrl}/conf/nginx/ssl.conf -O /etc/nginx/conf.d/ssl.conf
    - cmd[bl]:
        - sed -i '/#GFADMIN/,/TCP\ SECTION\ PROTOTYPE/d' /etc/nginx/nginx-jelastic.conf
        - wget ${baseUrl}/conf/nginx/https_redirection.conf -O /tmp/https_redirection.conf
        - cat /tmp/https_redirection.conf >> /etc/nginx/nginx-jelastic.conf
      user: root
    - restartContainers[bl]

addons:
- id: letsencrypt
  name: letsencrypt
  onInstall:
  - install:
      envName: ${env.envName}
      nodeGroup: bl
      jps: https://raw.githubusercontent.com/jelastic-jps/lets-encrypt/blob/master/manifest.jps
      settings:
        customDomains: ${settings.externalDomains}

# TODO: fix this!
# - provide hasura endpoint
success:
  text: |
    **Hasura Console**: [${env.protocol}://${env.domain}/](${env.protocol}://${env.domain}/)  
    **Hasura Admin Secret**: ${globals.HASURA_ADMIN_SECRET}  
    **Hasura Database Name**: ${globals.HASURA_DB_NAME}  
    **Hasura Database Username**: ${globals.HASURA_DB_USERNAME}  
    **Hasura Database Password**: ${globals.HASURA_DB_PASSWORD}  
    **Auth Admin Email**: ${globals.USER_EMAIL}  
    **Auth Admin Password**: ${globals.AUTH_ADMIN_PASSWORD}  
    **Auth Almighty API Key**: ${globals.AUTH_ALMIGHTY_API_KEY}  
    **Auth Serverless API Key**: ${globals.AUTH_SERVERLESS_API_KEY}  
    **Auth Database Name**: ${globals.AUTH_DB_NAME}  
    **Auth Database Username**: ${globals.AUTH_DB_USERNAME}  
    **Auth Database Password**: ${globals.AUTH_DB_PASSWORD}